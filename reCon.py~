import string
inp = ["TTTTTGTACCGGGGG",
        "CGGTTCTCGAATCCA",
        "GTATGCACACGCCCA",
        "GCTCCTTTTCTCAAC",
        "CTCCTGCACCGCCAC",
        "GCGGCACTTAATACG",
        "AATTAGTGCGCGTAT",
        "CAGAACATATGACAT",
        "ATGAGTATGCACACG",
        "TTCCAGAACATATGA",
        "ATCGCGTTCTCTCTT",
        "TCCATGTAAATACAA",
        "GCGGGGGATGAGTAT",
        "CGCGTATTAGTGCGA",
        "GCGGCAATTGCTAGT",
        "CACCGTGATCGTGTC",
        "GCTCTTTTTGTACCG",
        "TATCTCCTGCACCGC",
        "GTCTTCTCGCGGCAA",
        "ATACGATTTCTTGCG",
        "GGATGAGTATGCACA",
        "CCTTTTCTCAACGAC",
        "CGCGAAGCGGCACTT",
        "ACGAGTTTCGATAAC",
        "GCTACACTCGACCCT",
        "TGCTATTATTATTCT",
        "CGTGATCGTGTCTAT",
        "GCCACCATCGCGTTC",
        "GTAAAAATCTACGAG",
        "TGTCTTCTCGCGGCA",
        "CGAAGCGGCACTTAA",
        "CCCCTTTGATCGCGG",
        "TCGCGAAGCGGCACT",
        "TCTCGCGGCAATTGC",
        "CGCCGCGTATAGCGG",
        "GATAACTCCAGGATC",
        "ATTAGTGCGATTCCC",
        "CCCTCTCGGCTCTTT",
        "CCTGCACCGCCACCA",
        "GCAATTGCTAGTGCC",
        "CCCATTTGCTCCTTT",
        "CCCACCCGCTACACT",
        "TCGGCTCTTTTTGTA",
        "ACATATGACATATCA",
        "TACCGGGGGCCTATA",
        "GCCCTTATAATAAGG",
        "CCCGCTACACTCGAC",
        "AGCGGTCGTAAAAAT",
        "CCAGGATCAATGCGG",
        "ATCAGTGCAAGCTGA",
        "GTGCGATTCCCATTT",
"CGCGTTCTCTCTTAT",
"CCGCGTATAGCGGTC",
"GTTTCGATAACTCCA",
"TATTATTATTCTTTC",
"AAGCGGCACTTAATA",
"TAGCGGTCGTAAAAA",
"GATTCCCATTTGCTC",
"GATCTTATGTCCGCC",
"ACATATCAGTGCAAG",
"CGCGGTTCTCGAATC",
"TCCGCCGCGTATAGC",
"TGACATATCAGTGCA",
"TCTCGAATCCATGTA",
"TCTTGCGATGTGTCT",
"GGTTCTCGAATCCAT",
"GATCAATGCGGAACT",
"GCGTTCTCTCTTATT",
"TAGGCGGGGGATGAG",
"CAATTAGTGCGCGTA",
"CGAGTTTCGATAACT",
"GTGCCTGGTAAGTCA",
"CCCTTATAATAAGGC",
"TACAAAGATCTTATG",
"CACGCCCACCCGCTA",
"CTCCTTTTCTCAACG",
"GAGTATGCACACGCC",
"GTCGTAAAAATCTAC",
"TAACTCCAGGATCAA",
"CTTTGATCGCGGTTC",
"TCTTTCCAGAACATA",
"ACACGCCCACCCGCT",
"CATGTAAATACAAAG",
"ACCATCGCGTTCTCT",
"GGCGGGGGATGAGTA",
"CTTTTTGTACCGGGG",
"AATCCATGTAAATAC",
"AAATACAAAGATCTT",
"TCAATGCGGAACTAT",
"TATTCTTTCCAGAAC",
"CTCGAATCCATGTAA",
"CCATGTAAATACAAA",
"CATTTGCTCCTTTTC",
"CTGCACCGCCACCAT",
"GATCGCGGTTCTCGA",
"GACATATCAGTGCAA",
"AGGCGGGGGATGAGT",
"TTATAATAAGGCCAC",
"GCGATGTGTCTTCTC",
"ATGCCCTTATAATAA",
"TAAGGCCACAATTAG",
"CTCAACGACCAACGT",
"TTTTGTACCGGGGGC",
"TATAATAAGGCCACA",
"GGGCCTATATCTCCT",
"GGGGATGAGTATGCA",
"ATTCTTTCCAGAACA",
"CTTTCCAGAACATAT",
"ATCTTATGTCCGCCG",
"TAAATACAAAGATCT",
"ACCGGGGGCCTATAT",
"GCTAGTGCCTGGTAA",
"ATTATTATTCTTTCC",
"ATTCCCATTTGCTCC",
"ATGACATATCAGTGC",
"CCTATATCTCCTGCA",
"CGACCAACGTAGGCG",
"GCGGAACTATGCCCT",
"GCAAGCTGAATCGCG",
"TAATAAGGCCACAAT",
"TTAGTGCGCGTATTA",
"ACCCGCTACACTCGA",
"GTTCTCTCTTATTTT",
"ATATGACATATCAGT",
"GTGCAAGCTGAATCG",
"CTCGACCCTCTCGGC",
"AATTGCTAGTGCCTG",
"TCTTTTTGTACCGGG",
"GCGTATTAGTGCGAT",
"ACGTAGGCGGGGGAT",
"AGCTGAATCGCGAAG",
"CACACGCCCACCCGC",
"TACGAGTTTCGATAA",
"AACTCCAGGATCAAT",
"ACTCCAGGATCAATG",
"AGAACATATGACATA",
"TTTCGATAACTCCAG",
"TTTCCAGAACATATG",
"AGGATCAATGCGGAA",
"GCCTATATCTCCTGC",
"AATCGCGAAGCGGCA",
"GGAACTATGCCCTTA",
"ATAATAAGGCCACAA",
"ATGTGTCTTCTCGCG",
"CTGAATCGCGAAGCG",
"AATACAAAGATCTTA",
"TTTGCTCCTTTTCTC",
"CTACGAGTTTCGATA",
"TCAACGACCAACGTA",
"TCTCGGCTCTTTTTG",
"CCCTTTGATCGCGGT",
"GGGGGATGAGTATGC",
"ATAACTCCAGGATCA",
"AGTGCCTGGTAAGTC",
"TTGCTCCTTTTCTCA",
"CTTCTCGCGGCAATT",
"ATATCAGTGCAAGCT",
"AAAAATCTACGAGTT",
"GAGTTTCGATAACTC",
"ATCTACGAGTTTCGA",
"TCGCGGTTCTCGAAT",
"TCGCGTTCTCTCTTA",
"AACGACCAACGTAGG",
"CTCTTATTTTGCTAT",
"GTGTCTTCTCGCGGC",
"CGGTCGTAAAAATCT",
"TGCAAGCTGAATCGC",
"ACAATTAGTGCGCGT",
"AAGTCACCGTGATCG",
"TCCAGGATCAATGCG",
"CCAGAACATATGACA",
"AATAAGGCCACAATT",
"TGTACCGGGGGCCTA",
"GCACCGCCACCATCG",
"TCTTCTCGCGGCAAT",
"TTCTTTCCAGAACAT",
"ATTTTGCTATTATTA",
"TCGATAACTCCAGGA",
"AATGCGGAACTATGC",
"TAGTGCCTGGTAAGT",
"GCCCCTTTGATCGCG",
"GCTGAATCGCGAAGC",
"TAAAAATCTACGAGT",
"TCTCCTGCACCGCCA",
"CCACCATCGCGTTCT",
"CGTATAGCGGTCGTA",
"TTATTCTTTCCAGAA",
"CATCGCGTTCTCTCT",
"TAAGTCACCGTGATC",
"CGCCACCATCGCGTT",
"TATAGCGGTCGTAAA",
"CCTTTGATCGCGGTT",
"ATTTCTTGCGATGTG",
"CGATTTCTTGCGATG",
"GGCTCTTTTTGTACC",
"CGACCCTCTCGGCTC",
"CCTTATAATAAGGCC",
"TTATGTCCGCCGCGT",
"CGTATTAGTGCGATT",
"GTAAGTCACCGTGAT",
"CAGGATCAATGCGGA",
"GAATCCATGTAAATA",
"GTATTAGTGCGATTC",
"ATCCATGTAAATACA",
"GCGGTTCTCGAATCC",
"ACTCGACCCTCTCGG",
"GATTTCTTGCGATGT",
"TTTCTTGCGATGTGT",
"TAGTGCGATTCCCAT",
"TGCGATGTGTCTTCT",
"CTCTCGGCTCTTTTT",
"TGAATCGCGAAGCGG",
"GCGTATAGCGGTCGT",
"CTGGTAAGTCACCGT",
"GGGATGAGTATGCAC",
"GGCCACAATTAGTGC",
"TACGATTTCTTGCGA",
"ATGTCCGCCGCGTAT",
"TTAATACGATTTCTT",
"TGCCTGGTAAGTCAC",
"CAATGCGGAACTATG",
"TTTTCTCAACGACCA",
"CGATAACTCCAGGAT",
"CTCTTTTTGTACCGG",
"TTCTTGCGATGTGTC",
"AGTATGCACACGCCC",
"GCTATTATTATTCTT",
"TCGTAAAAATCTACG",
"GGTAAGTCACCGTGA",
"ACAAAGATCTTATGT",
"AGCGGCACTTAATAC",
"TCGAATCCATGTAAA",
"GTGATCGTGTCTATG",
"TGCCCCTTTGATCGC",
"GGGGGCCTATATCTC",
"AACGTAGGCGGGGGA",
"CCGCCACCATCGCGT",
"CGTAAAAATCTACGA",
"GGCACTTAATACGAT",
"GACCAACGTAGGCGG",
"TCACCGTGATCGTGT",
"TATGTCCGCCGCGTA",
"ATTGCTAGTGCCTGG",
"GTCACCGTGATCGTG",
"GAACTATGCCCTTAT",
"GGTCGTAAAAATCTA",
"CGCGTATAGCGGTCG",
"TTCTCAACGACCAAC",
"GCACACGCCCACCCG",
"CAATTGCTAGTGCCT",
"AAGCTGAATCGCGAA",
"CGCGGCAATTGCTAG",
"CCAACGTAGGCGGGG",
"TTGCTATTATTATTC",
"GCGATTCCCATTTGC",
"TTTGATCGCGGTTCT",
"CGGAACTATGCCCTT",
"AGTGCGCGTATTAGT",
"AGTCACCGTGATCGT",
"AAGGCCACAATTAGT",
"CCGCCGCGTATAGCG",
"TCTTATTTTGCTATT",
"CATATCAGTGCAAGC",
"CTATGCCCTTATAAT",
"GTAGGCGGGGGATGA",
"TTATTTTGCTATTAT",
"TTGATCGCGGTTCTC",
"AATCTACGAGTTTCG",
"ATGTAAATACAAAGA",
"AGTTTCGATAACTCC",
"ATAGCGGTCGTAAAA",
"CTCGGCTCTTTTTGT",
"TGCGGAACTATGCCC",
"TTTTGCTATTATTAT",
"TTCCCATTTGCTCCT",
"AACTATGCCCTTATA",
"CTTGCGATGTGTCTT",
"GTACCGGGGGCCTAT",
"TCCAGAACATATGAC",
"TATATCTCCTGCACC",
"TCGACCCTCTCGGCT",
"TCTACGAGTTTCGAT",
"TTAGTGCGATTCCCA",
"GTGCGCGTATTAGTG",
"TTCGATAACTCCAGG",
"TGTAAATACAAAGAT",
"AGTGCAAGCTGAATC",
"ATCAATGCGGAACTA",
"GCGCGTATTAGTGCG",
"AAAATCTACGAGTTT",
"CTATATCTCCTGCAC",
"TATTTTGCTATTATT",
"GCCACAATTAGTGCG",
"CCGGGGGCCTATATC",
"CTCCAGGATCAATGC",
"TTGCGATGTGTCTTC",
"TGCTAGTGCCTGGTA",
"TGCTCCTTTTCTCAA",
"CGATTCCCATTTGCT",
"ATCGCGAAGCGGCAC",
"GGCAATTGCTAGTGC",
"CTTATGTCCGCCGCG",
"CCACAATTAGTGCGC",
"TTTGTACCGGGGGCC",
"GCACTTAATACGATT",
"TTTCTCAACGACCAA",
"GATGTGTCTTCTCGC",
"CCACCCGCTACACTC",
"TGATCGCGGTTCTCG",
"CGGGGGATGAGTATG",
"GATGAGTATGCACAC",
"CCTGGTAAGTCACCG",
"ATACAAAGATCTTAT",
"TTCTCGAATCCATGT",
"ACGACCAACGTAGGC",
"CGAATCCATGTAAAT",
"AGATCTTATGTCCGC",
"CATATGACATATCAG",
"TCGCGGCAATTGCTA",
"TCCCATTTGCTCCTT",
"CGGCTCTTTTTGTAC",
"CCATCGCGTTCTCTC",
"CCGTGATCGTGTCTA",
"ATAAGGCCACAATTA",
"ATTAGTGCGCGTATT",
"TGCACCGCCACCATC",
"CACAATTAGTGCGCG",
"TGAGTATGCACACGC",
"ATGCGGAACTATGCC",
"ATCTCCTGCACCGCC",
"TGTCCGCCGCGTATA",
"ATTATTCTTTCCAGA",
"ACCCTCTCGGCTCTT",
"TTCTCGCGGCAATTG",
"TAATACGATTTCTTG",
"TTATTATTCTTTCCA",
"CAACGACCAACGTAG",
"CCATTTGCTCCTTTT",
"CTTTTCTCAACGACC",
"GAACATATGACATAT",
"CAGTGCAAGCTGAAT",
"CTATTATTATTCTTT",
"CTACACTCGACCCTC",
"GCGGTCGTAAAAATC",
"GAAGCGGCACTTAAT",
"TGCCCTTATAATAAG",
"TGGTAAGTCACCGTG",
"ACTTAATACGATTTC",
"TGCGATTCCCATTTG",
"AAAGATCTTATGTCC",
"ACGATTTCTTGCGAT",
"AACATATGACATATC",
"TCTCTTATTTTGCTA",
"TATGACATATCAGTG",
"TACACTCGACCCTCT",
"CGTTCTCTCTTATTT",
"TTCTCTCTTATTTTG",
"GACCCTCTCGGCTCT",
"CTTAATACGATTTCT",
"CGATGTGTCTTCTCG",
"CGCCCACCCGCTACA",
"ACTATGCCCTTATAA",
"GGATCAATGCGGAAC",
"CGTAGGCGGGGGATG",
"TAGTGCGCGTATTAG",
"ACCGTGATCGTGTCT",
"CTTATTTTGCTATTA",
"GCCTGGTAAGTCACC",
"CGGCAATTGCTAGTG",
"GGCCTATATCTCCTG",
"CACCATCGCGTTCTC",
"TGCGCGTATTAGTGC",
"CGCTACACTCGACCC",
"TATGCACACGCCCAC",
"CGGCACTTAATACGA",
"CCGCTACACTCGACC",
"CACCCGCTACACTCG",
"GTAAATACAAAGATC",
"ACCAACGTAGGCGGG",
"CCTCTCGGCTCTTTT",
"GCCGCGTATAGCGGT",
"GAATCGCGAAGCGGC",
"GTCCGCCGCGTATAG",
"TCTCTCTTATTTTGC",
"ACACTCGACCCTCTC",
"TATTAGTGCGATTCC",
"TCTCAACGACCAACG",
"ATCGCGGTTCTCGAA",
"ACGCCCACCCGCTAC",
"TTGCTAGTGCCTGGT",
"TCTTATGTCCGCCGC",
"CACTCGACCCTCTCG",
"AGGCCACAATTAGTG",
"CAAGCTGAATCGCGA",
"CAACGTAGGCGGGGG",
"ATATCTCCTGCACCG",
"TATCAGTGCAAGCTG",
"TATTATTCTTTCCAG",
"GGGGCCTATATCTCC",
"CTCTCTTATTTTGCT",
"GTATAGCGGTCGTAA",
"TTTGCTATTATTATT",
"TGCACACGCCCACCC",
"TCCTGCACCGCCACC",
"AGTGCGATTCCCATT",
"TCCTTTTCTCAACGA",
"ACCGCCACCATCGCG",
"ATTTGCTCCTTTTCT",
"CACCGCCACCATCGC",
"CTCGCGGCAATTGCT",
"GCCCACCCGCTACAC",
"CAAAGATCTTATGTC",
"TTGTACCGGGGGCCT",
"CACTTAATACGATTT",
"GTTCTCGAATCCATG",
"CGGGGGCCTATATCT",
"AAGATCTTATGTCCG",
"TCAGTGCAAGCTGAA",
"ATGCACACGCCCACC",
"AAATCTACGAGTTTC",
"CTAGTGCCTGGTAAG",
"AATACGATTTCTTGC",
"GCGAAGCGGCACTTA",
"CTTATAATAAGGCCA",
"TATGCCCTTATAATA",
"TGTGTCTTCTCGCGG"]


out = [] 

def find(k, kmer):
    suf = {}
    pre = {}
    build = ""
    ps = k-1
    i = 0
    while i < len(kmer):
        p = kmer[i][0]
        part1 = p[0:ps]
        if part1 in pre.keys():
            print "Here P"
            pre[part1] += 1
        else:
            pre[part1] = 1
        part2 = p[1:k]
        if part2 in suf.keys():
            print "Here S"
            suf[part2] +=1
        else:
            suf[part2] = 1
        i +=1
    
    setGos(kmer, pre, suf, ps, k)
def setGos(kmer, pre, suf, ps, k):
    i = 0
    start = False
    while i < len(kmer):
        p = kmer[i][0]
        part1 = p[0:ps]
        if part1 in suf.keys():
            if pre[part1] > suf[part1]:
                kmer[i][1] = 1
                start = True
        else:
            kmer[i][1] = 1
            start = True

        i += 1
    build(kmer, ps, suf, pre, k)

def build(kmer, ps, suf, pre, k):
    beg = True
    mark = ""
    e = 0
    print kmer
    while e < len(kmer):
        if kmer[e][1] == 1:
            g = kmer[e][0]
            if g[0:ps] in suf.keys():
                if pre[g[0:ps]] > suf[g[1:k]]:
                    out.append(g)
                    mark = g[1:k]
                    kmer.pop(e)
            else:
                out.append(g)
                mark = g[1:k]
                kmer.pop(e)
        e += 1
    while beg:
        beg = False
        i = 0
        while i < len(kmer):
            next = kmer[i][0]
            if next[0:ps] == mark:
                out.append(next[ps])
                kmer.pop(i)
                mark = next[1:k]
                beg = True
            i +=1
    
    if len(kmer) >  0:
        build(kmer, ps, suf, k)    
    else:
        print kmer
        q = "".join(out)
        print "The reconstructed string: "
        print q
        print "The length of the string is %d" % len(q)
                    

def main():
    kmer = []
    go = int(raw_input("Enter 1 to make custom or 2 to go big: "))
    x = 0
    if go == 1:
        k = int(raw_input("Enter in k: "))
        t = " "
        while t != "":
            t = raw_input("Enter in Khmer: ")
            row = [t,0]
            if t:
                kmer.append(row)
        x = len(kmer)
    elif go == 2:
        k = 15
        for i in range(len(inp)):
            row = [inp[i],0]
            kmer.append(row)
        x = len(kmer)
    else:
        print "Ya Goofed"
    find(k , kmer)
    print "The k-1 plus number of khmers is %d" % (x + (k-1))
main()
